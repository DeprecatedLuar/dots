# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Overview

This is a portable, modular bash configuration system designed to work across multiple Linux distributions and Termux. The configuration lives in `~/.config/bash/` and symlinks to `~/.bashrc` and `~/.profile`.

## Architecture

### Configuration Loading Flow
1. `bashrc` (main config) → sources `modules/universal/source.sh`
2. `source.sh` → loads both universal and local modules (aliases, paths)
3. Modules define environment variables, PATH additions, and shell customizations

### Directory Structure
- **`bin/`** - Executable scripts (added to PATH)
  - `bashrc` - Main CLI tool for managing the config system
- **`lib/`** - Library scripts (not in PATH, sourced by other scripts)
  - OS detection, package management, workspace initialization
- **`modules/`** - Bash configuration modules
  - `universal/` - Cross-platform configurations (git-tracked)
  - `local/` - Machine-specific overrides (git-ignored)
- **`dev-tools/`** - Isolated development tool installations
  - `cargo/` (Rust), `go/`, `npm/` - Keeps dev tools separate from system

### Package Management System
The system supports multiple package managers through a modular design:
- `lib/os-detect.sh` - Detects OS and package manager
- `lib/{apt,pkg}-packages.sh` - Package lists and install functions per package manager
- Each file defines `UNIVERSAL[]` and `DEV_TOOLS[]` arrays plus an `install_packages()` function

## Key Commands

### Setup & Initialization
```bash
./setup.sh                    # Initial setup (run after cloning)
bashrc init                   # Create workspace structure at ~/Workspace
```

### Package Management
```bash
bashrc install universal      # Install core utilities (curl, git, zoxide, ranger, etc.)
bashrc install dev-tools      # Install development tools (golang, nodejs)
bashrc install all            # Install everything
```

### Configuration Management
```bash
reload                        # Reload bash config and fix permissions
bashrc update                 # Pull latest from GitHub and reload

# Edit configuration files
bashrc ela                    # Edit local aliases
bashrc elp                    # Edit local paths
bashrc eua                    # Edit universal aliases
bashrc eup                    # Edit universal paths
```

## Environment Variables

Standard workspace structure (defined in `modules/universal/paths.sh`):
- `$BASHRC` → `~/.config/bash`
- `$WORKSPACE_ROOT` → `~/Workspace`
- `$PROJECTS` → `~/Workspace/projects`
- `$TOOLS` → `~/Workspace/tools`
- `$TOOLS_HOMEMADE` → `~/Workspace/tools/homemade`
- `$TOOLS_FOREIGN` → `~/Workspace/tools/foreign`

Development tools are isolated in `~/.config/bash/dev-tools/`:
- `$CARGO_HOME` → Rust/Cargo
- `$GOPATH` → Go packages
- `$NPM_CONFIG_PREFIX` → npm global packages

## Adding New Features

### Adding Packages
1. Edit `lib/apt-packages.sh` (or appropriate package manager file)
2. Add package name to `UNIVERSAL[]` or `DEV_TOOLS[]` array
3. Run `bashrc install [category]`

### Adding Aliases or PATH Entries
- **Universal (cross-platform)**: Edit `modules/universal/aliases.sh` or `paths.sh`
- **Local (machine-specific)**: Edit `modules/local/aliases.sh` or `paths.sh`
- Run `reload` to apply changes

### Supporting New Package Managers
Create `lib/{pkgmgr}-packages.sh` with:
- `UNIVERSAL[]` array
- `DEV_TOOLS[]` array
- `install_packages()` function

## Design Principles

1. **Portability**: Universal configs work across distributions; local overrides handle machine-specific needs
2. **Modularity**: Configuration split into focused modules (aliases, paths, etc.)
3. **Isolation**: Dev tools installed in config directory, not system-wide
4. **Simplicity**: Clear separation between sourced libraries and executable scripts
