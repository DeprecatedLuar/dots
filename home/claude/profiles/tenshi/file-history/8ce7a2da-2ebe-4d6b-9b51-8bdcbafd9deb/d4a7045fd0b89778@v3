(defcfg
  process-unmapped-keys yes
  log-layer-changes no
  linux-device-detect-mode keyboard-only
)

;; ============ SOURCE ============
(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

;; ============ VARIABLES ============
(defvars
  vim (layer-switch vim-normal)
  def (layer-switch deflayer)
  esc (layer-switch escape  )
  meta (layer-while-held meta-layer)

  Tt 200 ;; tap time
  Ht 200 ;; hold time
)

;; ============ ALIASES ============
(defalias
  ;; International key (102d): tap = one-shot ctrl, hold = ctrl
  intl-double-ctrl (tap-hold 200 200 (one-shot 2000 lctl) lctl)

  ;; Caps Lock: single tap for vim-mode, double tap for escape, hold for super key
  caps-tap-hold (tap-hold-press 200 300 (tap-dance 300 ((layer-switch vim-mode) esc)) lmet)

  ;; Conditional keys with Super modifier
  f^ (fork f lctl (lmet rmet))
  d^ (fork d lsft (lmet rmet))
  s^ (fork s lalt (lmet rmet))

  ;; Layer switching
  caps-to-default (layer-switch default)
  ctrl-exit (multi lctl (layer-switch default))
  shift-toggle (layer-switch vim-shift)
  visual-toggle (layer-switch visual-mode)
  visual-exit (layer-switch vim-mode)
  insert-exit (layer-switch default)
  super-exit (multi lmet (layer-switch default))

  ;; Copy and cut actions
  copy-exit (multi C-c (layer-switch vim-mode))
  cut-exit (multi C-x (on-press-fakekey-delay 50) (on-press-fakekey exit-to-vim press))
  visual-cut C-x
  vim-d bspc

  ;; Shift layer auto-return commands
  sq (multi S-q (layer-switch vim-mode))  sw (multi S-w (layer-switch vim-mode))
  se (multi S-e (layer-switch vim-mode))  sr (multi S-r (layer-switch vim-mode))
  st (multi S-t (layer-switch vim-mode))  sy (multi S-y (layer-switch vim-mode))
  su (multi S-u (layer-switch vim-mode))  si (multi S-i (layer-switch vim-mode))
  so (multi S-o (layer-switch vim-mode))  sp (multi S-p (layer-switch vim-mode))
  sa (multi S-a (layer-switch vim-mode))  ss (multi S-s (layer-switch vim-mode))
  sd (multi S-d (layer-switch vim-mode))  sf (multi S-f (layer-switch vim-mode))
  sg (multi S-g (layer-switch vim-mode))
  sz (multi S-z (layer-switch vim-mode))  sc (multi S-c (layer-switch vim-mode))
  sb (multi S-b (layer-switch vim-mode))  sn (multi S-n (layer-switch vim-mode))
  sm (multi S-m (layer-switch vim-mode))
)

;; ============ LAYERS ============
(deflayer default
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @caps-tap-hold a    @s-conditional    @d-conditional    @f-conditional    g    h    j    k    l    ;    '    ret
  lsft @intl-double-ctrl z    x    c    v    b    n    m    ,    .    /    rsft
  lctl @super-exit lalt           spc            ralt @super-exit rctl
)

(deflayer vim-mode
  XX   1    2    3    4    5    6    7    8    9    0    XX   XX   bspc
  XX   XX   C-right XX   XX   XX   C-c  C-z  @insert-exit XX   C-v  [    ]    XX
  @caps-to-default XX   XX   C-x  @d-conditional   XX   left down up right XX   '    ret
  lsft @intl-double-ctrl XX   del  XX   @shift-toggle XX   XX   XX   XX   @vim-d XX   rsft
  @ctrl-exit @super-exit lalt           spc            ralt @super-exit @ctrl-exit
)

(deflayer vim-shift
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  @sq  S-C-right @se  @sr  @st  C-c  @su  @si  @so  @sp  [    ]    \
  @caps-to-default @sa  @ss  @sd  @d-conditional  @sg  S-left S-down S-up S-right ;    '    ret
  lsft @intl-double-ctrl @sz  @cut-exit @sc  @visual-toggle @sb  @sn  @sm  ,    @sd  /    rsft
  @ctrl-exit @super-exit lalt           spc            ralt @super-exit @ctrl-exit
)

(deflayer visual-mode
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    S-C-right e    r    t    @copy-exit u    i    o    p    [    ]    \
  @caps-to-default a    s    @visual-cut    @d-conditional    g    S-left S-down S-up S-right ;    '    ret
  lsft @intl-double-ctrl z    del    S-c    @visual-exit b    n    m    ,    S-bspc /    rsft
  @ctrl-exit @super-exit lalt           spc            ralt @super-exit @ctrl-exit
)
